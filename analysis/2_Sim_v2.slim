initialize(){
	
	//------------------------------------
	// data storage and recording
	//------------------------------------
//	setwd("/projectnb/dispevol/E_Schlatter/kernelSGS/analysis");
	setwd("C:/Users/eschlatter/Dropbox/DispersalSGS/analysis");
	defineConstant("simID", getSeed());
	defineCfgParam("taskID", 1);
	defineCfgParam("runname", "other");
//	createDirectory(("../output/" + runname + "/" + asInteger(taskID) + '_' + simID));
	defineCfgParam("simplInt",1); 	// tree sequence simplification interval
	
	//initializeTreeSeq(simplificationInterval=asInteger(simplInt)); // simplify tree sequence every ## ticks
	
	//------------------------------------
	// biological parameters
	//------------------------------------

	// realistic...
	defineCfgParam("K",1643); // target population density at equilibrium	(x 269km^2, gives target pop size)
	defineCfgParam("F_goby",4); // number of offspring per female
	defineCfgParam("SX",0.005); // competition distance. On the order of distance between sponges, ~5m.	
	defineCfgParam("MATECHOICE_DIST", 0.1); // mate choice radius = 10m in reality; greater to ensure pop persistence

//	// fast, for debugging
//	defineCfgParam("K",16); // target population density at equilibrium	(x 269km^2, gives target pop size ~4300)
//	defineCfgParam("F_goby",10); // number of offspring per female
//	defineCfgParam("SX",0.5); // competition distance. On the order of distance between sponges, ~5m.	
//	defineCfgParam("MATECHOICE_DIST", 0.5); // mate choice radius = 10m in reality; greater to ensure pop persistence
	
//	// faster, for debugging
//	defineCfgParam("K",10); // target population density at equilibrium	(x 269km^2 gives target pop size)
//	defineCfgParam("F_goby",4); // number of offspring per female
//	defineCfgParam("SX",0.5); // competition distance. On the order of distance between sponges, ~5m.	
//	defineCfgParam("MATECHOICE_DIST", 2); // mate choice radius = 10m in reality; greater to ensure pop persistence

	
	//------------------------------------	
	// SLiM options
	//------------------------------------
	initializeSLiMModelType("nonWF");

	// spatial
	initializeSLiMOptions(dimensionality="xy");
	

	
	//------------------------------------	
	// genetics
	//------------------------------------

	initializeMutationType("m1", 0.5, "f", 0.0); //neutral
	m1.convertToSubstitution = T;
	initializeGenomicElementType("g1", m1, 1.0);
	initializeGenomicElement(g1, 0, 99999); // for now, use one chromosome
	initializeMutationRate(0);
	initializeRecombinationRate(1.5e-8); // per base position per gamete, 1cM/Mbp=1e-8 in SLiM's units. Lit says 1.5cM/Mbp, so set to 1.5e-8.
	initializeSex("A"); // Keep track of males and females ecologically, but don't need sex chromosomes
	
	
	// interaction: females looking for mates
	initializeInteractionType(1,"xy",maxDistance=MATECHOICE_DIST,sexSegregation='FM');
	i1.setInteractionFunction("l",1.0);
	
	// interaction: local population density
	// density around each larva is determined using a kernel weighted by distance.
	initializeInteractionType(2, "xy", maxDistance=SX*3); // only look for individuals up to distance SX*3 (i.e., 3 standard deviations)
	i2.setInteractionFunction("n", 1.0, SX); 	// kernel is a normal distribution with maximum strength 1 and standard deviation SX
}


//------------------------------------
// set up populations and map
//------------------------------------
1 early() {
	// add one population
	sim.addSubpop("p1",K*269); // target pop size: target density * reef area (269km^2)
		
	// map png file (created by 1_GenerateMapAndParams.Rmd)
	mapImage = Image("../data/map_SLiM.png");
	
	// connect the populations to the map
	p1.setSpatialBounds(c(0.0, 0.0, 123.286, 261.714)); // distances in km: from dist_x and dist_y in Rmd file
	map = p1.defineSpatialMap("bbr", "xy", 1.0 - mapImage.floatB, // reef=1, water=0
		valueRange=c(0.0, 1.0), colors=c("white","black"));
	defineConstant("MAP",map); // global constant for use in dispersal later on
			
	// set spatial positions of gobies (anywhere on reef)
	// (code credit: https://github.com/MesserLab/SLiM-Extras)
	leftToDraw = p1.individuals;
	while (size(leftToDraw) > 0){
		positions = p1.pointUniform(size(leftToDraw));
		onReef = p1.spatialMapValue("bbr", positions) == 1.0;
		onReefCount = sum(onReef);
		if (onReefCount > 0){
			onReefPositions = positions[repEach(onReef, 2)];
			leftToDraw[seqLen(onReefCount)].setSpatialPosition(onReefPositions);
			leftToDraw = leftToDraw[seqLen(size(leftToDraw) - onReefCount) + onReefCount];
		}
	}
	
	// output header
	defineConstant("start",clock());
	catn("simID="+simID+"\ntaskID="+taskID+"\nrunname="+runname+"\nsimplInt="+simplInt+"\n");
	catn("K="+K+"\nF_goby="+F_goby+"\nMATECHOICE_DIST="+MATECHOICE_DIST+"\n");
	catn('tick popsize nomate');

}

//------------------------------------
// output: log file and sponge data
// pick appropriate log interval!
//------------------------------------
//ticks 3 early(){	// wait until tick 3 so any global variables we need are defined, etc.
//	// log file	
//	log = sim.createLogFile(("../output/" + simID + "/log_" + simID + ".txt"),logInterval=1000);
//	log.addCycle();
//	log.addCustomColumn("popsize","popsize;");
//	//log.addCustomColumn("nomate","nomate;");
//	}

//------------------------------------
// evaluate mate choice interaction
//------------------------------------
2: first(){
	i1.evaluate(p1); // evaluate mate choice interaction
	
	//------------------------------------
	// output: population size
	//------------------------------------
	// log
	//defineGlobal('popsize',size(p2.individuals)); 	// total successful recruits
	// text
	cat(community.tick);
	cat(' ' + size(p1.individuals));
	//------------------------------------
}

//------------------------------------
// reproduction
//------------------------------------
reproduction(NULL,'F'){
	mate = i1.drawByStrength(receiver = individual,count = 1); // search for a mate within range
	if (size(mate)){  //produce offspring
		clutchSize = rpois(1,asInteger(F_goby));
		subpop.addCrossed(individual,mate,count=clutchSize);
		individual.tagL0 = F; // track how many found mates (can remove if we're not doing this)
	}
	else individual.tagL0 = T; // track how many found mates (can remove if we're not doing this)
}

//------------------------------------
// dispersal
//------------------------------------
//Everybody lands in reef habitat, according to dispersal kernel w/exponential cross-section
2: early() {
	larvae = p1.subsetIndividuals(maxAge=0);
	pos = larvae.spatialPosition;
	pos = MAP.sampleNearbyPoint(pos,INF,"e",0.36);
	larvae.setSpatialPosition(pos);
//	p2.deviatePositions(larvae,"stopping",INF,"e",0.36);
	
	//------------------------------------
	// output: nomate (how many didn't find mates)
	//------------------------------------
	moms = p1.subsetIndividuals(sex="F",minAge=1);
	// log
	//	defineGlobal("nomate", sum(moms.tagL0)/size(moms));
	// text	
	catn(' ' + sum(moms.tagL0)/size(moms));
	//------------------------------------
	
	// remove adults (keep nonoverlapping generations, for consistency w/previous model)
	sim.killIndividuals(p1.subsetIndividuals(minAge=1));
	
	i2.evaluate(p1);
	
//	// create local density map to use for competition/fitness calculation
//	grid_dims = asInteger(ceil(2*p1.spatialBounds/SX));
//	cat('/n'+grid_dims);
//	raw = summarizeIndividuals(p1.individuals, grid_dims, p1.spatialBounds, operation = "individuals.size();" , perUnitArea = T);
//	density_map = p1.defineSpatialMap("density","xy", raw);
//	density_map.smooth (SX * 3, "n", SX);
//	defineGlobal("DENSITY", density_map);
	
	// get local density
	// from map:
	//	density = p1.spatialMapValue(DENSITY , inds.spatialPosition); 
	// or from interaction:
	inds = p1.individuals; 
	density = i2.localPopulationDensity(inds);

	// set fitness (survival) based on local density
	u = density/(F_goby*K); // divide by K for per unit area; divide by F_goby because we want u=1 to be target # of adults
	catn(' '+mean(u));	
	a=0.25;
	inds.fitnessScaling = (1+a)/(F_goby*(1+a*u));
}

//------------------------------------
// output: tree sequences and simulation states
// pick appropriate output interval!
//------------------------------------
////ticks seq(from=20000,to=500000,by=20000) late() { 
//ticks 500 late() {
//	// tree sequence data
//	defineGlobal("TS_PATH", "../output/" + simID + "/ts_" + simID + "_t" + sim.tick + ".trees");
//	treeSeqOutput(TS_PATH);	
//	// goby simulation state for reinput into SLiM
//	defineGlobal("SO_PATH", "../output/" + simID + "/so_" + simID + "_t" + sim.tick);
//	outputFull(filePath = SO_PATH);
//}

//------------------------------------
// end sim and record time
//------------------------------------
100 late() {
	cat('OUT: ' + simID + ', ' + (clock()-start));
}


//------------------------------------
//// A HELPER FUNCTION FOR SETTING CONSTANTS THAT MIGHT BE CONFIGURED VIA COMMAND LINE.
//  Created by Sam Champer, 2020.
//  A product of the Messer Lab, http://messerlab.org/slim/

//  Sam Champer, Ben Haller and Philipp Messer, the authors of this code, hereby
//  place the code in this file into the public domain without restriction.
//  If you use this code, please credit SLiM-Extras and provide a link to
//  the SLiM-Extras repository at https://github.com/MesserLab/SLiM-Extras.
//  Thank you.
function (void) defineCfgParam(string$ name, lifs value) {
	if (!exists(name))
		defineConstant(name, value);
}