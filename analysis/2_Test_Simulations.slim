species all initialize(){
	
	//------------------------------------
	// data storage and recording
	//------------------------------------
//	setwd("/projectnb/dispevol/E_Schlatter/kernelSGS/analysis");
	setwd("C:/Users/eschlatter/Dropbox/DispersalSGS/analysis");
	defineConstant("simID", getSeed());
	defineCfgParam("taskID", 1);
	defineCfgParam("runname", "other");
//	createDirectory(("../output/" + runname + "/" + asInteger(taskID) + '_' + simID));
	defineCfgParam("simplInt",1); 	// tree sequence simplification interval
	
	//------------------------------------
	// biological parameters
	//------------------------------------
//	defineCfgParam("N_sponge",50000); // population size (when habitat is saturated)
//	defineCfgParam("F_goby",50); // number of offspring per female
//	defineCfgParam("NMAX",0.2); // larval navigation distance
//	defineCfgParam("MATECHOICE_DIST",0.15); // mate choice radius = 10m in reality; greater to ensure pop persistence

	// fast, for debugging
	defineCfgParam("N_sponge",100); // population size (when habitat is saturated)	
	defineCfgParam("F_goby",300); // number of offspring per female
	defineCfgParam("NMAX",3); // larval navigation distance
	defineCfgParam("MATECHOICE_DIST",5); // mate choice radius = 10m in reality; greater to ensure pop persistence


	initializeSLiMModelType("nonWF");
	
	//------------------------------------	
	// interactions
	//------------------------------------
	// larvae looking for sponges
	initializeInteractionType(1,"xy",maxDistance=NMAX);
	i1.setInteractionFunction("l",1.0);
	
	// females looking for mates
	initializeInteractionType(2,"xy",maxDistance=MATECHOICE_DIST,sexSegregation='FM');
	i2.setInteractionFunction("l",1.0);
	
	//sponges checking for settlers
	initializeInteractionType(3,"xy",maxDistance=0);
}

//------------------------------------
// set up species
//------------------------------------

species sponge initialize() {
	initializeSpecies(avatar = 'S', color='orange');
	initializeSLiMOptions(dimensionality="xy");
	// no genetics
}

species goby initialize() {
	initializeSpecies(avatar='G',color='blue');
	initializeSLiMOptions(dimensionality="xy");
	//initializeTreeSeq(simplificationInterval=asInteger(simplInt)); // simplify tree sequence every ## ticks
	
	// genetics
	initializeMutationType("m1", 0.5, "f", 0.0); //neutral
	m1.convertToSubstitution = T;
	initializeGenomicElementType("g1", m1, 1.0);
	initializeGenomicElement(g1, 0, 99999); // for now, use one chromosome
	initializeMutationRate(0);
	initializeRecombinationRate(1.5e-8); // per base position per gamete, 1cM/Mbp=1e-8 in SLiM's units. Lit says 1.5cM/Mbp, so set to 1.5e-8.
	initializeSex("A"); // Keep track of males and females ecologically, but don't need sex chromosomes
}

//------------------------------------
// set up populations and map
//------------------------------------
ticks all 1 early() {
	// add one population each of sponges (p1) and gobies (p2)
	sponge.addSubpop("p1", asInteger(N_sponge)); //sponges
	goby.addSubpop("p2",asInteger(round(0.9*N_sponge)));
	
	// map png file (created by 1_GenerateMapAndParams.Rmd)
	mapImage = Image("../data/map_SLiM.png");
	
	// connect the populations to the map
	p1.setSpatialBounds(c(0.0, 0.0, 123.286, 261.714)); // distances in km: from dist_x and dist_y in Rmd file
	map = p1.defineSpatialMap("bbr", "xy", mapImage.floatB,
		valueRange=c(0.0, 1.0), colors=c("black", "white"));
	p2.setSpatialBounds(c(0.0, 0.0, 123.286, 261.714)); // distances in km: from dist_x and dist_y in Rmd file
	map = p2.defineSpatialMap("bbr", "xy", mapImage.floatR,
		valueRange=c(0.0, 1.0), colors=c("black", "white"));
	
	// set spatial positions of sponges (anywhere on reef)
	// (code credit: https://github.com/MesserLab/SLiM-Extras)
	leftToDraw = p1.individuals;
	while (size(leftToDraw) > 0){
		positions = p1.pointUniform(size(leftToDraw));
		onReef = p1.spatialMapValue("bbr", positions) == 0.0;
		onReefCount = sum(onReef);
		if (onReefCount > 0){
			onReefPositions = positions[repEach(onReef, 2)];
			leftToDraw[seqLen(onReefCount)].setSpatialPosition(onReefPositions);
			leftToDraw = leftToDraw[seqLen(size(leftToDraw) - onReefCount) + onReefCount];
		}
	}
	
	// place gobies in sponge positions
	positions = p1.sampleIndividuals(size(p2.individuals)).spatialPosition;
	p2.individuals.setSpatialPosition(positions);
	
	// output header
	defineConstant("start",clock());
	catn("simID="+simID+"\ntaskID="+taskID+"\nrunname="+runname+"\nsimplInt="+simplInt+"\n");
	catn("N_sponge="+N_sponge+"\nF_goby="+F_goby+"\nNMAX="+NMAX+"\nMATECHOICE_DIST="+MATECHOICE_DIST+"\n");
	catn('tick popsize nomate foundsponge');

}

//------------------------------------
// output: log file and sponge data
// pick appropriate log interval!
//------------------------------------
//ticks all 3 early(){	// wait until tick 3 so any global variables we need are defined, etc.
//	// log file	
//	log = community.createLogFile(("../output/" + simID + "/log_" + simID + ".txt"),logInterval=1000);
//	log.addCycle(goby);
//	log.addCustomColumn("popsize","popsize;");
//	//log.addCustomColumn("nomate","nomate;");
//	//log.addCustomColumn("foundsponge","foundsponge;");
//	
//	// output sponge data once at the beginning (since it doesn't change), so we can re-run sim if we want	
//	defineGlobal("SO_PATH", "../output/" + simID + "/so_" + simID + "_sponge");	
//	sponge.outputFull(filePath = SO_PATH);
//	}

//------------------------------------
// evaluate mate choice interaction
//------------------------------------
ticks goby 2: first(){
	i2.evaluate(p2);
	
	//------------------------------------
	// output: population size
	//------------------------------------
	// log
	//defineGlobal('popsize',size(p2.individuals)); 	// total successful recruits
	// text
	cat(community.tick);
	cat(' ' + size(p2.individuals));
	//------------------------------------
}

//------------------------------------
// reproduction
//------------------------------------
species goby reproduction(NULL,'F'){
	mate = i2.drawByStrength(receiver = individual,count = 1); // search for a mate within range
	if (size(mate)){  //produce offspring
		clutchSize = rpois(1,asInteger(F_goby));
		subpop.addCrossed(individual,mate,count=clutchSize);
		individual.tagL0 = F; // track how many found mates (can remove if we're not doing this)
	}
	else individual.tagL0 = T; // track how many found mates (can remove if we're not doing this)
}

//------------------------------------
// displacement
//------------------------------------
//First: move initial distance
ticks goby 2: early() {
	larvae = p2.subsetIndividuals(maxAge=0);
	p2.deviatePositions(larvae,"stopping",INF,"e",0.36);
	//sampleNearbyPoint
	
	//------------------------------------
	// output: nomate (how many didn't find mates)
	//------------------------------------
	moms = p2.subsetIndividuals(sex="F",minAge=1);
	// log
	//	defineGlobal("nomate", sum(moms.tagL0)/size(moms));
	// text	
	cat(' ' + sum(moms.tagL0)/size(moms));
	//------------------------------------
}
//Second: find a sponge (or die if you don't)
ticks all 2: early(){
	i1.evaluate(c(p2,p1));
	p2.individuals.tag=1; // 1=larva survives
	larvae = p2.subsetIndividuals(maxAge=0);
	for (larva in larvae){
		settle_site = i1.drawByStrength(receiver = larva,count = 1,exerterSubpop = p1); // search for sponge within range
		if(size(settle_site)){  // if a sponge was found
			larva.setSpatialPosition(settle_site.spatialPosition); //settle there
		}
		else larva.tag=0; // 0=larva dies
	}
	
	//------------------------------------
	// output: foundsponge (how many found a sponge)
	//------------------------------------
	// log
	//	defineGlobal('foundsponge',size(larvae[which(larvae.tag==1)])/size(larvae));
	// text	
	catn(' ' + size(larvae[which(larvae.tag==1)])/size(larvae));
	//------------------------------------	
		
	goby.killIndividuals(p2.subsetIndividuals(tag=0)); // remove those who didn't find a sponge
}

//------------------------------------
// mortality of adults (assume nonoverlapping generations)
//------------------------------------
species goby survival() {
	return(individual.age == 0);
}

//------------------------------------
// competition
//------------------------------------
ticks all 2: late(){
	i3.evaluate(c(p1,p2));
	p2.individuals.tag=1; // 1=larva survives
	for(spot in p1.individuals){
		settlers = i3.nearestInteractingNeighbors(spot,count=size(p2.individuals),exerterSubpop=p2);
		n_sett = size(settlers);
		if(n_sett>1){ //if there's competition
			settlers[sample(seqLen(n_sett),n_sett-1)].tag=0; // 0=larva dies
		}
	}
	goby.killIndividuals(p2.subsetIndividuals(tag=0)); // remove those who lost competition
}


//------------------------------------
// output: tree sequences and simulation states
// pick appropriate output interval!
//------------------------------------
////ticks all seq(from=20000,to=500000,by=20000) late() { 
//ticks all 500 late() {
//	// tree sequence data
//	defineGlobal("TS_PATH", "../output/" + simID + "/ts_" + simID + "_t" + community.tick + ".trees");
//	goby.treeSeqOutput(TS_PATH);	
//	// goby simulation state for reinput into SLiM
//	defineGlobal("SO_PATH", "../output/" + simID + "/so_" + simID + "_t" + community.tick);
//	goby.outputFull(filePath = SO_PATH);
//}

//------------------------------------
// end sim and record time
//------------------------------------
ticks all 50 late() {
	cat('OUT: ' + simID + ', ' + (clock()-start));
}


//------------------------------------
//// A HELPER FUNCTION FOR SETTING CONSTANTS THAT MIGHT BE CONFIGURED VIA COMMAND LINE.
//  Created by Sam Champer, 2020.
//  A product of the Messer Lab, http://messerlab.org/slim/

//  Sam Champer, Ben Haller and Philipp Messer, the authors of this code, hereby
//  place the code in this file into the public domain without restriction.
//  If you use this code, please credit SLiM-Extras and provide a link to
//  the SLiM-Extras repository at https://github.com/MesserLab/SLiM-Extras.
//  Thank you.
function (void) defineCfgParam(string$ name, lifs value) {
	if (!exists(name))
		defineConstant(name, value);
}